"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

import dj_database_url
import environ

from core.jazzmin_conf import *  # noqa

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# READING ENV
env = environ.Env()
env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS = [
	'http://127.0.0.1:8000/'
]
# Application definition
DJANGO_APPS = [
	"daphne",
	'channels',
	"jazzmin",
	"django.contrib.admin",
	"django.contrib.auth",
	"django.contrib.contenttypes",
	"django.contrib.sessions",
	"django.contrib.messages",
	"django.contrib.staticfiles",
]

CUSTOM_APPS = [
	"apps.common",
	"apps.users",
	"apps.projects",
	"apps.socket_message",
]

THIRD_PARTY_APPS = [
	"rest_framework",
	"drf_yasg",
	"corsheaders",
	"modeltranslation",
	'nplusone.ext.django',
]

REST_FRAMEWORK = {
	"DEFAULT_AUTHENTICATION_CLASSES": (
		"rest_framework.authentication.SessionAuthentication",
	),
	"DEFAULT_FILTER_BACKENDS": (
		"django_filters.rest_framework.DjangoFilterBackend",
		# "apps.text_services.filters.MultiSymbolSearchFilter",
	),
	"DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
	"DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
	"PAGE_SIZE": 10,
}

INSTALLED_APPS = DJANGO_APPS + CUSTOM_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
	"django.middleware.security.SecurityMiddleware",
	"django.contrib.sessions.middleware.SessionMiddleware",
	"corsheaders.middleware.CorsMiddleware",
	"django.middleware.common.CommonMiddleware",
	"django.middleware.csrf.CsrfViewMiddleware",
	"django.contrib.auth.middleware.AuthenticationMiddleware",
	"django.contrib.messages.middleware.MessageMiddleware",
	"django.middleware.clickjacking.XFrameOptionsMiddleware",
	'nplusone.ext.django.NPlusOneMiddleware',
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
	{
		"BACKEND": "django.template.backends.django.DjangoTemplates",
		"DIRS": [BASE_DIR / "templates"],
		"APP_DIRS": True,
		"OPTIONS": {
			"context_processors": [
				"django.template.context_processors.debug",
				"django.template.context_processors.request",
				"django.contrib.auth.context_processors.auth",
				"django.contrib.messages.context_processors.messages",
			],
		},
	},
]

WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": env.str("DB_ENGINE"),
#         "NAME": env.str("DB_NAME"),
#         "USER": env.str("DB_USER"),
#         "PASSWORD": env.get_value("DB_PASSWORD"),
#         "HOST": env.str("DB_HOST"),
#         "PORT": env.str("DB_PORT"),
#         "ATOMIC_REQUESTS": True,
#     }
# }
DATABASES = {
	'default': dj_database_url.config(),
}
DATABASES["default"]["ATOMIC_REQUESTS"] = False
DATABASES["default"]["DISABLE_SERVER_SIDE_CURSORS"] = False

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
	},
]

# NPLUSONE_LOGGER = logging.getLogger('nplusone')
# NPLUSONE_LOG_LEVEL = logging.WARN
#
# LOGGING = {
#     'version': 1,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'nplusone': {
#             'handlers': ['console'],
#             'level': 'WARN',
#         },
#     },
# }

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Tashkent"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"
STATICFILES_DIRS = (BASE_DIR / "staticfiles",)

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CACHES
CACHES = {
	"default": {
		"BACKEND": "django_redis.cache.RedisCache",
		"LOCATION": f"{env.str('REDIS_URL', 'redis://localhost:6379/0')}",
		"KEY_PREFIX": "project_name",
		"OPTIONS": {
			"CLIENT_CLASS": "django_redis.client.DefaultClient",
			"SERIALIZER": "django_redis.serializers.json.JSONSerializer",
		}
	}
}

REDIS_HOST = env.str("REDIS_HOST", "localhost")
REDIS_PORT = env.int("REDIS_PORT", 6379)
REDIS_DB = env.int("REDIS_DB", 0)

CHANNEL_LAYERS = {
	"default": {
		"BACKEND": "channels_redis.core.RedisChannelLayer",
		"CONFIG": {
			"hosts": [(REDIS_HOST, REDIS_PORT)],
		},
	},
}

# CELERY CONFIGURATION
CELERY_BROKER_URL = env.str("CELERY_BROKER_URL", "redis://localhost:6379")
CELERY_RESULT_BACKEND = env.str("CELERY_BROKER_URL", "redis://localhost:6379")
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_TIMEZONE = "Asia/Tashkent"
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 60 * 30

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# CYPHER CONFIGURATION
# AES
AES_KEY = env.str("AES_KEY", "secret_key")
#
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'primel040304@gmail.com'
EMAIL_HOST_PASSWORD = 'vuip bzmw rahe zmuc'
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = 'primel040304@gmail.com'

AUTH_USER_MODEL = 'users.User'

# SIMPLE_JWT = {
# 	"ACCESS_TOKEN_LIFETIME": timedelta(days=1),
# 	"REFRESH_TOKEN_LIFETIME": timedelta(days=120),
# 	"ROTATE_REFRESH_TOKENS": True,
# 	"BLACKLIST_AFTER_ROTATION": False,
# 	"UPDATE_LAST_LOGIN": True,
# 	"ALGORITHM": "HS256",
# 	"SIGNING_KEY": SECRET_KEY,
# 	"VERIFYING_KEY": "",
# 	"AUDIENCE": None,
# 	"ISSUER": None,
# 	"JSON_ENCODER": None,
# 	"JWK_URL": None,
# 	"LEEWAY": 0,
#
# 	"AUTH_HEADER_TYPES": ("Bearer",),
# 	"AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
# 	"USER_ID_FIELD": "id",
# 	"USER_ID_CLAIM": "user_id",
# 	"USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
#
# 	"AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
# 	"TOKEN_TYPE_CLAIM": "token_type",
# 	"TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
#
# }
